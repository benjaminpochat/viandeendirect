---
openapi: 3.0.2
info:
  title: viandeendirect
  version: 1.0.0
paths:
  /sales:
    summary: Path used to manage the list of sales.
    description: "The REST endpoint/path used to list and create zero or more `sale`\
      \ entities.  This path contains a `GET` and `POST` operation to perform the\
      \ list and create tasks, respectively."
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sale'
          description: Successful response - returns an array of `sale` entities.
      operationId: getsales
      summary: List All sales
      description: Gets a list of all `sale` entities.
    post:
      requestBody:
        description: A new `sale` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sale'
        required: true
      responses:
        "201":
          description: Successful response.
      operationId: createsale
      summary: Create a sale
      description: Creates a new instance of a `sale`.
  /sales/{saleId}:
    summary: Path used to manage a single sale.
    description: "The REST endpoint/path used to get, update, and delete single instances\
      \ of an `sale`.  This path contains `GET`, `PUT`, and `DELETE` operations used\
      \ to perform the get, update, and delete tasks, respectively."
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sale'
          description: Successful response - returns a single `sale`.
      operationId: getsale
      summary: Get a sale
      description: Gets the details of a single instance of a `sale`.
    put:
      requestBody:
        description: Updated `sale` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sale'
        required: true
      responses:
        "202":
          description: Successful response.
      operationId: updatesale
      summary: Update a sale
      description: Updates an existing `sale`.
    delete:
      responses:
        "204":
          description: Successful response.
      operationId: deletesale
      summary: Delete a sale
      description: Deletes an existing `sale`.
    parameters:
    - name: saleId
      description: A unique identifier for a `sale`.
      schema:
        type: string
      in: path
      required: true
  /productions:
    summary: Path used to manage the list of productions.
    description: "The REST endpoint/path used to list and create zero or more `production`\
      \ entities.  This path contains a `GET` and `POST` operation to perform the\
      \ list and create tasks, respectively."
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Production'
          description: Successful response - returns an array of `production` entities.
      operationId: getproductions
      summary: List All productions
      description: Gets a list of all `production` entities.
    post:
      requestBody:
        description: A new `production` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Production'
        required: true
      responses:
        "201":
          description: Successful response.
      operationId: createproduction
      summary: Create a production
      description: Creates a new instance of a `production`.
  /productions/{productionId}:
    summary: Path used to manage a single production.
    description: "The REST endpoint/path used to get, update, and delete single instances\
      \ of an `production`.  This path contains `GET`, `PUT`, and `DELETE` operations\
      \ used to perform the get, update, and delete tasks, respectively."
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Production'
          description: Successful response - returns a single `production`.
      operationId: getproduction
      summary: Get a production
      description: Gets the details of a single instance of a `production`.
    put:
      requestBody:
        description: Updated `production` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Production'
        required: true
      responses:
        "202":
          description: Successful response.
      operationId: updateproduction
      summary: Update a production
      description: Updates an existing `production`.
    delete:
      responses:
        "204":
          description: Successful response.
      operationId: deleteproduction
      summary: Delete a production
      description: Deletes an existing `production`.
    parameters:
    - name: productionId
      description: A unique identifier for a `production`.
      schema:
        type: string
      in: path
      required: true
  /orders:
    summary: Path used to manage the list of orders.
    description: "The REST endpoint/path used to list and create zero or more `Order`\
      \ entities.  This path contains a `GET` and `POST` operation to perform the\
      \ list and create tasks, respectively."
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
          description: Successful response - returns an array of `Order` entities.
      operationId: getOrders
      summary: List All Orders
      description: Gets a list of all `Order` entities.
    post:
      requestBody:
        description: A new `Order` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        "201":
          description: Successful response.
      operationId: createOrder
      summary: Create a Order
      description: Creates a new instance of a `Order`.
  /orders/{orderId}:
    summary: Path used to manage a single Order.
    description: "The REST endpoint/path used to get, update, and delete single instances\
      \ of an `Order`.  This path contains `GET`, `PUT`, and `DELETE` operations used\
      \ to perform the get, update, and delete tasks, respectively."
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: Successful response - returns a single `Order`.
      operationId: getOrder
      summary: Get a Order
      description: Gets the details of a single instance of a `Order`.
    put:
      requestBody:
        description: Updated `Order` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        "202":
          description: Successful response.
      operationId: updateOrder
      summary: Update a Order
      description: Updates an existing `Order`.
    delete:
      responses:
        "204":
          description: Successful response.
      operationId: deleteOrder
      summary: Delete a Order
      description: Deletes an existing `Order`.
    parameters:
    - name: orderId
      description: A unique identifier for a `Order`.
      schema:
        type: string
      in: path
      required: true
components:
  schemas:
    Order:
      description: ""
      required:
      - customer
      - id
      type: object
      properties:
        invoice:
          $ref: '#/components/schemas/Invoice'
          description: ""
        items:
          description: ""
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        customer:
          $ref: '#/components/schemas/Customer'
          description: ""
        id:
          description: ""
          type: UUID
          x-field-extra-annotation: '@jakarta.persistence.Id'
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Table(name
        = "orders")'
    Customer:
      description: ""
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
          description: ""
        id:
          description: ""
          type: UUID
          x-field-extra-annotation: '@jakarta.persistence.Id'
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Table(name
        = "customers")'
    Delivery:
      description: ""
      type: object
      properties:
        orders:
          description: ""
          type: array
          items:
            $ref: '#/components/schemas/Order'
        start:
          description: ""
          type: string
        end:
          description: ""
          type: string
        id:
          description: ""
          type: UUID
          x-field-extra-annotation: '@jakarta.persistence.Id'
        name:
          description: ""
          type: string
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Table(name
        = "deliveries")'
    Grower:
      description: ""
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
          description: ""
        id:
          description: ""
          type: UUID
          x-field-extra-annotation: '@jakarta.persistence.Id'
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Table(name
        = "growers")'
    Invoice:
      description: ""
      required:
      - order
      type: object
      properties:
        order:
          $ref: '#/components/schemas/Order'
          description: ""
        id:
          description: ""
          type: UUID
          x-field-extra-annotation: '@jakarta.persistence.Id'
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Table(name
        = "invoices")'
    Lot:
      description: ""
      required:
      - product
      type: object
      properties:
        product:
          $ref: '#/components/schemas/Product'
          description: ""
        id:
          description: ""
          type: UUID
          x-field-extra-annotation: '@jakarta.persistence.Id'
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Table(name
        = "lots")'
    OrderItem:
      description: ""
      required:
      - product
      type: object
      properties:
        product:
          $ref: '#/components/schemas/Product'
          description: ""
        unitPrice:
          description: |-
            Price per unit ordered.
            Must be multiplied per quantity to get the total price.
            Includes taxes.
        quantity:
          description: ""
        id:
          description: ""
          type: UUID
          x-field-extra-annotation: '@jakarta.persistence.Id'
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Table(name
        = "orderItems")'
    Product:
      description: ""
      type: object
      properties:
        description:
          description: ""
          type: string
        netWeight:
          description: ""
          type: number
        unitPrice:
          description: |-
            Price per unit (weight unit).
            Must be multiplied by the weight to get the total price for one product.
            Includes taxes.
        id:
          description: ""
          type: UUID
          x-field-extra-annotation: '@jakarta.persistence.Id'
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Table(name
        = "products")'
    Production:
      description: ""
      type: object
      properties:
        sales:
          description: ""
          type: array
          items:
            $ref: '#/components/schemas/Sale'
        grower:
          $ref: '#/components/schemas/Grower'
          description: ""
        lots:
          description: ""
          type: array
          items:
            $ref: '#/components/schemas/Lot'
        id:
          description: ""
          type: UUID
          x-field-extra-annotation: '@jakarta.persistence.Id'
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Table(name
        = "productions")'
    Sale:
      description: ""
      type: object
      properties:
        productions:
          description: ""
          type: array
          items:
            $ref: '#/components/schemas/Production'
        delivery:
          $ref: '#/components/schemas/Delivery'
          description: ""
        id:
          description: ""
          type: UUID
          x-field-extra-annotation: '@jakarta.persistence.Id'
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Table(name
        = "sales")'
    User:
      description: ""
      type: object
      properties:
        id:
          description: ""
          type: UUID
          x-field-extra-annotation: '@jakarta.persistence.Id'
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Table(name
        = "users")'

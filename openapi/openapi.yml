openapi: 3.0.2

info:
  title: viandeendirect.eu
  version: 0.0.1
  description: This API allows selling and buying food through the shortest path between
    farmers and customers.
servers:
  - url: http://localhost:8080

security:
  - oAuth2ForViandeEnDirect:
    - read
    - write

paths:

  /producers/{producerId}/sales:
    summary: Path used to manage the list of sales related to a particular producer.
    description: The REST endpoint/path used to list and create zero or more `sale` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.
    parameters:
    - name: producerId
      description: A unique identifier for a `producer`.
      schema:
        type: integer
      in: path
      required: true
    get:
      security:
        - oAuth2ForViandeEnDirect: [read]
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sale'
          description: Successful response - returns an array of `sale` entities.
      operationId: getProducerSales
      summary: List all sales owned by a spacific producer.
      description: Gets a list of all `sale` entities.
    post:
      security:
        - oAuth2ForViandeEnDirect: [write]
      requestBody:
        description: A new `sale` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sale'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sale'
          description: Successful response - returns the created `sale`.
      operationId: createProducerSale
      summary: Create a sale owned by a specific producer.
      description: Creates a new instance of a `sale`.

  /producers/{producerId}/customers:
    summary: Path used to manage the list of customers related to a particular producer.
    description: "The REST endpoint/path used to list zero or more customers"
    parameters:
    - name: producerId
      description: A unique identifier for a `producer`.
      schema:
        type: integer
      in: path
      required: true
    get:
      security:
        - oAuth2ForViandeEnDirect: [read]
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
          description: Successful response - returns an array of `customer` entities.
      operationId: getProducerCustomers
      summary: List all customers who have bought anything to a specific producer.
      description: Gets a list of all `customer` entities.

  /producers/{producerId}/stripeAccount/:
    parameters:
    - name: producerId
      description: A unique identifier for a `producer`.
      schema:
        type: integer
      in: path
      required: true
    post:
      security:
        - oAuth2ForViandeEnDirect: [write]
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StripeAccount'
          description: Successful response - returns a new Stripe account
      operationId: createStripeAccount
    get:
      security:
        - oAuth2ForViandeEnDirect: [read]
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StripeAccount'
          description: Successful response - returns a Stripe account
      operationId: getStripeAccount
  /producers/{producerId}/payments/summary:
    parameters:
    - name: producerId
      description: the id of the producer related to the payments summary
      schema:
        type: integer
      in: path
      required: true
    get:
      security:  
      - oAuth2ForViandeEnDirect: [read]
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentsSummary'
          description: Summary of payments made to the producer.
      operationId: getProducerPaymentsSummary
      summary: Get the payments summary for a producer

  /sales:
    summary: Path used to manage the list of all public sales.
    get:
      security:
        - oAuth2ForViandeEnDirect: [read]
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sale'
          description: a list of sales
      operationId: getSales
      summary: Get all the public sales
      description: Gets the list of `sale` instances, that are published by producers.

  /sales/{saleId}:
    summary: Path used to manage a single sale.
    description: "The REST endpoint/path used to get, update, and delete single instances\
      \ of an `sale`.  This path contains `GET`, `PUT`, and `DELETE` operations used\
      \ to perform the get, update, and delete tasks, respectively."
    get:
      security:
        - oAuth2ForViandeEnDirect: [read]
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sale'
          description: Successful response - returns a single `sale`.
      operationId: getSale
      summary: Get a sale
      description: Gets the details of a single instance of a `sale`.
    parameters:
    - name: saleId
      description: A unique identifier for a `sale`.
      schema:
        type: integer
      in: path
      required: true

  /sales/{saleId}/orders:
    summary: Path used to manage orders for a particular sale.
    get:
      security:
        - oAuth2ForViandeEnDirect: [read]
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
          description: Successful response - returns orderes for a single `sale`.
      operationId: getSaleOrders
      summary: Get orders for a particular sale
    parameters:
    - name: saleId
      description: A unique identifier for a `sale`.
      schema:
        type: integer
      in: path
      required: true

  /sales/{saleId}/productions:
    summary: Path used to manage productions for a particular sale.
    get:
      security:
        - oAuth2ForViandeEnDirect: [read]
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Production'
          description: Successful response - returns productions for a single `sale`.
      operationId: getSaleProductions
      summary: Get orders for a particular sale
    parameters:
    - name: saleId
      description: A unique identifier for a `sale`.
      schema:
        type: integer
      in: path
      required: true

  /productions:
    summary: Path used to manage the list of productions.
    get:
      security:
        - oAuth2ForViandeEnDirect: [read]
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Production'
          description: Successful response - returns an array of `production` entities.
      operationId: getProductions
      summary: List All productions
      description: Gets a list of all `production` entities.
      parameters:
        - in: query
          name: forSale
          schema: 
            type: boolean
            default: false
          description: "true to get only productions ready to be put on sale"

  /productions/{productionId}/percentageSold:
    summary: Path used to get the percentage sold for a given production.
    get:
      security:
        - oAuth2ForViandeEnDirect: [read]
      responses:
        "200":
          content:
            application/json:
              schema:
                type: integer
          description: Successful response - returns a single `production`.
      operationId: getProductionPercentageSold
    parameters:
    - name: productionId
      description: A unique identifier for a `production`.
      schema:
        type: integer
      in: path
      required: true

  /beefProductions:
    post:
      requestBody:
        description: A new `beefProduction` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BeefProduction'
        required: true
      security:
        - oAuth2ForViandeEnDirect: [write]
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeefProduction'          
          description: Successful response - returns the `beefProduction`created.
      operationId: createBeefProduction
      summary: Create a new beef production

  /beefProductions/{beefProductionId}:
    get:
      security:
        - oAuth2ForViandeEnDirect: [read]
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeefProduction'
          description: Successful response - returns a single `beefProduction`.
      operationId: getBeefProduction
      summary: Get a beef production
      description: Gets the details of a single instance of a `beefProduction`.
    parameters:
    - name: beefProductionId
      description: A unique identifier for a `beefProduction`.
      schema:
        type: integer
      in: path
      required: true

  /packageTemplates:
    get:
      security:
        - oAuth2ForViandeEnDirect: [read]
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PackageTemplate'
          description: Successful response - returns all package template
      operationId: getPackageTemplates
      summary: Get all package templates
      description: Get all package templates

  /addresses:
    get:
      security:
        - oAuth2ForViandeEnDirect: [read]
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
          description: Successful response - returns all addresses
      operationId: getAddresses
      summary: Get all addresses
      description: Get all addresses

  /honneyProductions/{honneyProductionId}:
    get:
      security:
        - oAuth2ForViandeEnDirect: [read]
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HonneyProduction'
          description: Successful response - returns a single `honneyProduction`.
      operationId: getHonneyProduction
      summary: Get a honney production
      description: Gets the details of a single instance of a `honneyProduction`.
    parameters:
    - name: honneyProductionId
      description: A unique identifier for a `honneyProduction`.
      schema:
        type: integer
      in: path
      required: true

  /customers:
    summary: Path used to manage customers
    get:
      parameters:
        - in: query
          name: email
          schema: 
            type: string
          description: "the email of the Customer to load"
      security:
        - oAuth2ForViandeEnDirect: [read]
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
          description: Successful response - returns a `Customer` entities.
      operationId: getCustomer
      summary: Get a customer identified by its email.
      description: Gets a `Customer` entities.
    post:
      security:
        - oAuth2ForViandeEnDirect: [write]
      requestBody:
        description: A new `customer` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
          description: Successful response - returns the `Customer` entity created.
      operationId: createCustomer
      summary: Create a new customer

  /producers:
    summary: Path used to manage producers
    get:
      parameters:
        - in: query
          name: email
          schema: 
            type: string
          description: "the email of the Producer to load"
      security:
        - oAuth2ForViandeEnDirect: [read]
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producer'
          description: Successful response - returns a `Producer` entities.
      operationId: getProducer
      summary: Get a producer identified by its email.
      description: Gets a `Producer` entities.

  /orders:
    summary: Path used to manage orders.
    description: "The REST endpoint/path used to list and create zero or more `Order`\
      \ entities.  This path contains a `GET` and `POST` operation to perform the\
      \ list and create tasks, respectively."
    post:
      security:
        - oAuth2ForViandeEnDirect: [write]
      requestBody:
        description: A new `Order` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: Successful response.
      operationId: createOrder
      summary: Create a Order
      description: Creates a new instance of a `Order`.

  /orders/{orderId}:
    summary: Path used to manage a single Order.
    get:
      security:
        - oAuth2ForViandeEnDirect: [read]
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: Successful response - returns a single `Order`.
      operationId: getOrder
      summary: Get a Order
      description: Gets the details of a single instance of a `Order`.
    parameters:
    - name: orderId
      description: A unique identifier for a `Order`.
      schema:
        type: integer
      in: path
      required: true

  /orders/payment:
    summary: Path used to manage an order payment.
    post:
      security:
        - oAuth2ForViandeEnDirect: [write]
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: Successful response - returns a single `Order` with its `StripePayment`.
      operationId: createOrderPayment
      summary: Creates a payment for the order given as a payload
      description: Creates an order and its payment that should be processes afterward on payment platform.
      requestBody:
        description: A new `Order` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true


components:
  securitySchemes:
    oAuth2ForViandeEnDirect:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: http://localhost:8180/realms/viandeendirect/protocol/openid-connect/auth
          tokenUrl: http://localhost:8180/realms/viandeendirect/protocol/openid-connect/token
          scopes:
            read: Grants read access
            write: Grants write access
            admin: Grants access to admin operations

  schemas:
    PackageLot:
      description: "A lot of packages"
      type: object
      properties:
        id:
          type: integer
          x-field-extra-annotation: '@jakarta.persistence.Id'
        production:
          $ref: '#/components/schemas/Production'
          description: "The production from which the packages are prepared"
          x-field-extra-annotation: '@jakarta.persistence.ManyToOne'
        label:
          description: "Short label of the package template"
          type: string
        description:
          description: "Long description of the package template"
          type: string
        photo:
          description: "The photo of the package template, encoded as base64"
          type: string
        netWeight:
          description: ""
          type: number
          format: float
        unitPrice:
          description: |-
            Price per unit (weight unit).
            Must be multiplied by the weight to get the total price for one package.
            Includes taxes.
          type: number
          format: float
        quantity:
          description: "the quantity of packages for this batch initially on sale"
          type: integer
        quantitySold:
          description: "the quantity of packages for this batch already sold"
          type: integer
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Table(name
        = "packages")'
    PackageTemplate:
      description: ""
      type: object
      properties:
        id:
          description: ""
          type: integer
          x-field-extra-annotation: '@jakarta.persistence.Id'
        label:
          description: "Short label of the package template"
          type: string
        description:
          description: "Long description of the package template"
          type: string
        photo:
          description: "The photo of the package template, encoded as base64"
          type: string
        netWeight:
          description: ""
          type: number
          format: float
        unitPrice:
          description: |-
            Price per unit (weight unit).
            Must be multiplied by the weight to get the total price for one package.
            Includes taxes.
          type: number
          format: float
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Table(name
        = "package_templates")'
    User:
      description: ""
      type: object
      properties:
        id:
          description: ""
          type: integer
          x-field-extra-annotation: '@jakarta.persistence.Id'
        email:
          type: string
          format: email
        phone:
          type: string
        firstName:
          type: string
        lastName:
          type: string
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Table(name
        = "users")'
    Customer:
      description: ""
      type: object
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Table(name = "customers")'
      properties:
        user:
          $ref: '#/components/schemas/User'
          description: ""
          x-field-extra-annotation: '@jakarta.persistence.OneToOne'
        id:
          description: ""
          type: integer
          x-field-extra-annotation: '@jakarta.persistence.Id'
    Invoice:
      description: ""
      type: object
      properties:
        id:
          description: ""
          type: integer
          x-field-extra-annotation: '@jakarta.persistence.Id'
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Table(name = "invoices")'
    Production:
      description: ""
      type: object
      properties:
        id:
          description: ""
          type: integer
          x-field-extra-annotation: '@jakarta.persistence.Id'
        productionType:
          type: string
          enum: ['BeefProduction', 'HonneyProduction']
        sales:
          description: ""
          type: array
          items:
            $ref: '#/components/schemas/Sale'
          x-field-extra-annotation: '@jakarta.persistence.ManyToMany(mappedBy = "productions")'
        producer:
          $ref: '#/components/schemas/Producer'
          description: ""
          x-field-extra-annotation: '@jakarta.persistence.ManyToOne'
        lots:
          description: ""
          type: array
          items:
            $ref: '#/components/schemas/PackageLot'
          x-field-extra-annotation: '@jakarta.persistence.OneToMany(mappedBy = "production")'
      discriminator:
        propertyName: 'productionType'
        mapping:
          'BeefProduction': '#/components/schemas/BeefProduction'
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Inheritance(strategy = jakarta.persistence.InheritanceType.TABLE_PER_CLASS)'
    BeefProduction:
      allOf:
        - $ref: '#/components/schemas/Production'
      description: "a production a beef meet, obtained by slaughtering and cutting an entire animal"
      type: object
      properties:
        animalIdentifier:
          description: "official identifier of the animal"
          type: string
        animalType:
          description: "type of animal"
          type: string
          enum: ['BEEF_COW', 'BEEF_HEIFER', 'BEEF_BULL', 'BEEF_VEAL']
        cattleBreed:
          description: "breed of the animal"
          type: string
          enum: ['LIMOUSINE', 'CHAROLAISE']
        birthDate:
          description: "date when the animal is born"
          type: string
          format: date
        birthPlace:
          description: "place where the animal is born"
          type: string
        birthFarm:
          description: "farming company where the animal is born"
          type: string
        warmCarcassWeight:
          description: "weight of the animal just after being killed, in kilograms"
          type: integer
        meatWeight:
          description: "weight of meat predicted, in kilograms"
          type: integer
        slaughterDate:
          description: "date when the animal has been killed"
          type: string
          format: date
        slaughterPlace:
          description: "the place where the animal has been killed"
          type: string
        slaughterHouse:
          description: "the company where the animal has been killed"
          type: string
        cuttingDate:
          description: "date when the animal has been cutted"
          type: string
          format: date
        cuttingPlace:
          description: "the place where the animal has been cutted"
          type: string
        cuttingButcher:
          description: "butcher company where the animal has been cutted"
          type: string
        labelRougeCertified:
          description: "true if the animal breeding process matches the french 'label rouge certification"
          type: boolean
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Table(name = "beef_productions")'
    HonneyProduction:
      allOf:
        - $ref: '#/components/schemas/Production'
      description: "a production of honney"
      type: object
      properties: 
        totalWeight:
          description: "total weight of honney produced"
          type: number
          format: float
        honeyDescription:
          description: "type of honney, type of flowers nectar gathered"
          type: string
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Table(name = "honney_productions")'
    OrderItem:
      description: ""
      required:
      - package
      type: object
      properties:
        id:
          description: ""
          type: integer
          x-field-extra-annotation: '@jakarta.persistence.Id'
        order:
          $ref: '#/components/schemas/Order'
          x-field-extra-annotation: '@jakarta.persistence.ManyToOne'
        packageLot:
          $ref: '#/components/schemas/PackageLot'
          x-field-extra-annotation: '@jakarta.persistence.OneToOne'
        unitPrice:
          description: |-
            Price per unit ordered.
            Must be multiplied per quantity to get the total price.
            Includes taxes.
          type: number
          format: float
        quantity:
          description: ""
          type: integer
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Table(name = "orderItems")'
    Order:
      description: ""
      required:
      - customer
      type: object
      properties:
        id:
          description: ""
          type: integer
          x-field-extra-annotation: '@jakarta.persistence.Id'
        invoice:
          $ref: '#/components/schemas/Invoice'
          description: ""
          x-field-extra-annotation: '@jakarta.persistence.OneToOne'
        items:
          description: ""
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
          x-field-extra-annotation: '@jakarta.persistence.OneToMany(mappedBy = "order")'
        customer:
          $ref: '#/components/schemas/Customer'
          x-field-extra-annotation: '@jakarta.persistence.OneToOne'
        sale:
          $ref: '#/components/schemas/Sale'
          x-field-extra-annotation: '@jakarta.persistence.ManyToOne'
        payment:
          $ref: '#/components/schemas/StripePayment'
          x-field-extra-annotation: '@jakarta.persistence.OneToOne'
        status:
          $ref: '#/components/schemas/OrderStatus'
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Table(name = "orders")'
    Sale:
      description: ""
      type: object
      properties:
        id:
          type: integer
          x-field-extra-annotation: '@jakarta.persistence.Id'
        seller:
          $ref: '#/components/schemas/Producer'
          x-field-extra-annotation: '@jakarta.persistence.ManyToOne'
        productions:
          description: ""
          type: array
          items:
            $ref: '#/components/schemas/Production'
            x-field-extra-annotation: '@jakarta.persistence.ManyToMany'
        orders:
          description: ""
          type: array
          items:
            $ref: '#/components/schemas/Order'
            x-field-extra-annotation: '@jakarta.persistence.OneToMany(mappedBy = "sale")'
        deliveryStart:
          description: ""
          type: string
          format: date-time
        deliveryStop:
          description: ""
          type: string
          format: date-time
        deliveryAddressName:
          type: string
        deliveryAddressLine1:
          type: string
        deliveryAddressLine2:
          type: string
        deliveryCity:
          type: string
        deliveryZipCode:
          type: string
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Table(name = "sales")'
    StripeAccount:
      description: an acount for Stripe payment service
      type: object
      properties:
        id:
          type: integer
          x-field-extra-annotation: '@jakarta.persistence.Id'
          description: the Stripe account id given by viandeendirect.eu
        stripeId:
          type: string
          description: the Stripe account id given by Stripe service
        detailsSubmitted:
          x-field-extra-annotation: '@jakarta.persistence.Transient'
          description: true if additionnal informations of the account owner have been fulfilles in Stripe platform
          type: boolean
        accountLink:
          x-field-extra-annotation: '@jakarta.persistence.Transient'
          description: the link to the account on Stripe platform
          type: string
    StripePayment:
      description: a payment piloted by Stripe platform.
      type: object
      properties:
        id:
          description: "the Stripe payment id given by viandeendirect.eu"
          x-field-extra-annotation: '@jakarta.persistence.Id'
          type: integer
        checkoutSessionId:
          description: the Stripe Checkout Session id of the payment
          type: string
        paymentUrl:
          type: string
          description: the url where to redirect the customer to process the payment on Stripe platform.
          x-field-extra-annotation: '@jakarta.persistence.Transient'
    Producer:
      description: a producer
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
          description: ""
          x-field-extra-annotation: '@jakarta.persistence.OneToOne'
        id:
          type: integer
          x-field-extra-annotation: '@jakarta.persistence.Id'
        status:
          $ref: '#/components/schemas/ProducerStatus'
        productions:
          type: array
          items:
            $ref: '#/components/schemas/Production'
          x-field-extra-annotation: '@jakarta.persistence.OneToMany(mappedBy = "producer")'
        sales:
          type: array
          items:
            $ref: "#/components/schemas/Sale"
          x-field-extra-annotation: '@jakarta.persistence.OneToMany(mappedBy = "seller")'
        stripeAccount:
          $ref: '#/components/schemas/StripeAccount'
        slideShowUrl:
          description: 'url of a slide show to present the producer'
          type: string
        websiteUrl:
          description: "url of the producer's website"
          type: string
        farmName:
          description: "public name of the farm"
          type: string
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Table(name = "producers")'
    Address:
      description: "an address for delivering orders"
      type: object
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Table(name = "addresses")'
      properties:
        id: 
          type: integer
          x-field-extra-annotation: '@jakarta.persistence.Id'
        name:
          description: "the name of the address"
          type: string
        city:
          type: string
        addressLine1:
          type: string
        addressLine2:
          type: string
        zipCode: 
          type: string
        owner:
          $ref: '#/components/schemas/Producer'
          description: "the producer who owns the delivery address"
    ProducerStatus:
      type: string
      enum: [ON_BOARDING, ACTIVE]
    OrderStatus:
      type: string
      enum: [BOOKED_WITHOUT_PAYMENT, PAYMENT_PENDING, PAYMENT_COMPLETED, PAYMENT_ABORTED, DELIVERED]
    PaymentsSummary:
      description: "the summary of payments made"
      type: object
      properties:
        daylyTotal:
          type: number
          format: float
          description: "the total amount paid for last day"
        weeklyTotal:
          type: number
          format: float
          description: "the total amount paid for last week"
        monthlyTotal:
          type: number
          format: float
          description: "the total amount paid for last month"
        yearlyTotal:
          type: number
          format: float
          description: "the total amount paid for last year"
openapi: 3.0.2

info:
  title: viandeendirect.eu
  version: 0.0.1
  description: This API allows selling and buying food through the shortest path between
    farmers and customers.

security:
  - oAuth2ForViandeEnDirect:
    - read
    - write

paths:
  /sales:
    summary: Path used to manage the list of sales.
    description: "The REST endpoint/path used to list and create zero or more `sale`\
      \ entities.  This path contains a `GET` and `POST` operation to perform the\
      \ list and create tasks, respectively."
    get:
      security:
        - oAuth2ForViandeEnDirect: [read]
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sale'
          description: Successful response - returns an array of `sale` entities.
      operationId: getSales
      summary: List all sales for the current user
      description: Gets a list of all `sale` entities.
    post:
      security:
        - oAuth2ForViandeEnDirect: [write]
      requestBody:
        description: A new `sale` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sale'
        required: true
      responses:
        "201":
          description: Successful response.
      operationId: createSale
      summary: Create a sale
      description: Creates a new instance of a `sale`.
  /sales/{saleId}:
    summary: Path used to manage a single sale.
    description: "The REST endpoint/path used to get, update, and delete single instances\
      \ of an `sale`.  This path contains `GET`, `PUT`, and `DELETE` operations used\
      \ to perform the get, update, and delete tasks, respectively."
    get:
      security:
        - oAuth2ForViandeEnDirect: [read]
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sale'
          description: Successful response - returns a single `sale`.
      operationId: getSale
      summary: Get a sale
      description: Gets the details of a single instance of a `sale`.
    put:
      security:
        - oAuth2ForViandeEnDirect: [write]
      requestBody:
        description: Updated `sale` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sale'
        required: true
      responses:
        "202":
          description: Successful response.
      operationId: updateSale
      summary: Update a sale
      description: Updates an existing `sale`.
    delete:
      security:
        - oAuth2ForViandeEnDirect: [write]
      responses:
        "204":
          description: Successful response.
      operationId: deleteSale
      summary: Delete a sale
      description: Deletes an existing `sale`.
    parameters:
    - name: saleId
      description: A unique identifier for a `sale`.
      schema:
        type: string
      in: path
      required: true
  /productions:
    summary: Path used to manage the list of productions.
    description: "The REST endpoint/path used to list and create zero or more `production`\
      \ entities.  This path contains a `GET` and `POST` operation to perform the\
      \ list and create tasks, respectively."
    get:
      security:
        - oAuth2ForViandeEnDirect: [read]
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Production'
          description: Successful response - returns an array of `production` entities.
      operationId: getProductions
      summary: List All productions
      description: Gets a list of all `production` entities.
      parameters:
        - in: query
          name: forSale
          schema: 
            type: boolean
            default: false
          description: "true to get only productions ready to be put on sale"
    post:
      security:
        - oAuth2ForViandeEnDirect: [write]
      requestBody:
        description: A new `production` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Production'
        required: true
      responses:
        "201":
          description: Successful response.
      operationId: createProduction
      summary: Create a production
      description: Creates a new instance of a `production`.
  /productions/{productionId}:
    summary: Path used to manage a single production.
    description: "The REST endpoint/path used to get, update, and delete single instances\
      \ of an `production`.  This path contains `GET`, `PUT`, and `DELETE` operations\
      \ used to perform the get, update, and delete tasks, respectively."
    get:
      security:
        - oAuth2ForViandeEnDirect: [read]
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Production'
          description: Successful response - returns a single `production`.
      operationId: getProduction
      summary: Get a production
      description: Gets the details of a single instance of a `production`.
    put:
      security:
        - oAuth2ForViandeEnDirect: [write]
      requestBody:
        description: Updated `production` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Production'
        required: true
      responses:
        "202":
          description: Successful response.
      operationId: updateProduction
      summary: Update a production
      description: Updates an existing `production`.
    delete:
      security:
        - oAuth2ForViandeEnDirect: [write]
      responses:
        "204":
          description: Successful response.
      operationId: deleteProduction
      summary: Delete a production
      description: Deletes an existing `production`.
    parameters:
    - name: productionId
      description: A unique identifier for a `production`.
      schema:
        type: string
      in: path
      required: true
  /productions/{productionId}/percentageSold:
    summary: Path used to get the percentage sold for a given production.
    get:
      security:
        - oAuth2ForViandeEnDirect: [read]
      responses:
        "200":
          content:
            application/json:
              schema:
                type: number
          description: Successful response - returns a single `production`.
      operationId: getProductionPercentageSold
      parameters:
      - name: beefProductionId
        description: A unique identifier for a `beefProduction`.
        schema:
          type: string
        in: path
        required: true
  /beefProductions/{beefProductionId}:
    get:
      security:
        - oAuth2ForViandeEnDirect: [read]
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeefProduction'
          description: Successful response - returns a single `beenProduction`.
      operationId: getBeefProduction
      summary: Get a beef production
      description: Gets the details of a single instance of a `beenProduction`.
    parameters:
    - name: beefProductionId
      description: A unique identifier for a `beefProduction`.
      schema:
        type: string
      in: path
      required: true
  /packageTemplates:
    get:
      security:
        - oAuth2ForViandeEnDirect: [read]
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackageTemplate'
          description: Successful response - returns all package template
      operationId: getPackageTemplates
      summary: Get all package templates
      description: Get all package templates
  /addresses:
    get:
      security:
        - oAuth2ForViandeEnDirect: [read]
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
          description: Successful response - returns all addresses
      operationId: getAddresses
      summary: Get all addresses
      description: Get all addresses
  /honneyProductions/{honneyProductionId}:
    get:
      security:
        - oAuth2ForViandeEnDirect: [read]
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HonneyProduction'
          description: Successful response - returns a single `honneyProduction`.
      operationId: getHonneyProduction
      summary: Get a honney production
      description: Gets the details of a single instance of a `honneyProduction`.
    parameters:
    - name: honneyProductionId
      description: A unique identifier for a `honneyProduction`.
      schema:
        type: string
      in: path
      required: true
  /customers:
    summary: Path used to manage customers
    get:
      security:
        - oAuth2ForViandeEnDirect: [read]
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
          description: Successful response - returns an array of `Customer` entities.
      operationId: getCustomers
      summary: List All Customers
      description: Gets a list of all `Customer` entities.
  /orders:
    summary: Path used to manage orders.
    description: "The REST endpoint/path used to list and create zero or more `Order`\
      \ entities.  This path contains a `GET` and `POST` operation to perform the\
      \ list and create tasks, respectively."
    get:
      security:
        - oAuth2ForViandeEnDirect: [read]
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
          description: Successful response - returns an array of `Order` entities.
      operationId: getOrders
      summary: List All Orders
      description: Gets a list of all `Order` entities.
    post:
      security:
        - oAuth2ForViandeEnDirect: [write]
      requestBody:
        description: A new `Order` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        "201":
          description: Successful response.
      operationId: createOrder
      summary: Create a Order
      description: Creates a new instance of a `Order`.
  /orders/{orderId}:
    summary: Path used to manage a single Order.
    description: "The REST endpoint/path used to get, update, and delete single instances\
      \ of an `Order`.  This path contains `GET`, `PUT`, and `DELETE` operations used\
      \ to perform the get, update, and delete tasks, respectively."
    get:
      security:
        - oAuth2ForViandeEnDirect: [read]
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: Successful response - returns a single `Order`.
      operationId: getOrder
      summary: Get a Order
      description: Gets the details of a single instance of a `Order`.
    put:
      security:
        - oAuth2ForViandeEnDirect: [write]
      requestBody:
        description: Updated `Order` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        "202":
          description: Successful response.
      operationId: updateOrder
      summary: Update a Order
      description: Updates an existing `Order`.
    delete:
      security:
        - oAuth2ForViandeEnDirect: [write]
      responses:
        "204":
          description: Successful response.
      operationId: deleteOrder
      summary: Delete a Order
      description: Deletes an existing `Order`.
    parameters:
    - name: orderId
      description: A unique identifier for a `Order`.
      schema:
        type: string
      in: path
      required: true
components:
  securitySchemes:
    oAuth2ForViandeEnDirect:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: http://localhost:8180/realms/viandeendirect/protocol/openid-connect/auth
          tokenUrl: http://localhost:8180/realms/viandeendirect/protocol/openid-connect/token
          scopes:
            read: Grants read access
            write: Grants write access
            admin: Grants access to admin operations
  schemas:
    PackageLot:
      description: "A lot of packages"
      type: object
      properties:
        id:
          description: ""
          type: number
          x-field-extra-annotation: '@jakarta.persistence.Id'
        label:
          description: "Short label of the package template"
          type: string
        description:
          description: "Long description of the package template"
          type: string
        photo:
          description: "The photo of the package template, encoded as base64"
          type: string
        netWeight:
          description: ""
          type: number
        unitPrice:
          description: |-
            Price per unit (weight unit).
            Must be multiplied by the weight to get the total price for one package.
            Includes taxes.
          type: number
        quantity:
          description: "the quantity of packages for this batch initially on sale"
          type: number
        quantitySold:
          description: "the quantity of packages for this batch already sold"
          type: number
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Table(name
        = "packages")'
    PackageTemplate:
      description: ""
      type: object
      properties:
        id:
          description: ""
          type: number
          x-field-extra-annotation: '@jakarta.persistence.Id'
        label:
          description: "Short label of the package template"
          type: string
        description:
          description: "Long description of the package template"
          type: string
        photo:
          description: "The photo of the package template, encoded as base64"
          type: string
        netWeight:
          description: ""
          type: number
        unitPrice:
          description: |-
            Price per unit (weight unit).
            Must be multiplied by the weight to get the total price for one package.
            Includes taxes.
          type: number
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Table(name
        = "package_templates")'
    User:
      description: ""
      type: object
      properties:
        id:
          description: ""
          type: number
          x-field-extra-annotation: '@jakarta.persistence.Id'
        email:
          type: string
        phone:
          type: string
        firstName:
          type: string
        lastName:
          type: string
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Table(name
        = "users")'
    Customer:
      description: ""
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
          description: ""
          x-field-extra-annotation: '@jakarta.persistence.OneToOne'
        id:
          description: ""
          type: number
          x-field-extra-annotation: '@jakarta.persistence.Id'
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Table(name
        = "customers")'
    Invoice:
      description: ""
      type: object
      properties:
        id:
          description: ""
          type: number
          x-field-extra-annotation: '@jakarta.persistence.Id'
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Table(name = "invoices")'
    Production:
      description: ""
      type: object
      properties:
        id:
          description: ""
          type: number
          x-field-extra-annotation: '@jakarta.persistence.Id'
        productionType:
          type: string
          enum: ['BeefProduction', 'HonneyProduction']
        sales:
          description: ""
          type: array
          items:
            $ref: '#/components/schemas/Sale'
          x-field-extra-annotation: '@jakarta.persistence.OneToMany'
        producer:
          $ref: '#/components/schemas/Producer'
          description: ""
          x-field-extra-annotation: '@jakarta.persistence.ManyToOne'
        lots:
          description: ""
          type: array
          items:
            $ref: '#/components/schemas/PackageLot'
          x-field-extra-annotation: '@jakarta.persistence.OneToMany'
      discriminator:
        propertyName: 'productionType'
        mapping:
          'BeefProduction': '#/components/schemas/BeefProduction'
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Inheritance(strategy = jakarta.persistence.InheritanceType.TABLE_PER_CLASS)'
    BeefProduction:
      allOf:
        - $ref: '#/components/schemas/Production'
      description: "a production a beef meet, obtained by slaughtering and cutting an entire animal"
      type: object
      properties:
        animalIdentifier:
          description: "official identifier of the animal"
          type: string
        animalType:
          description: "type of animal"
          type: string
        animalLiveWeight:
          description: "weight of the animal before being killed, in kilograms"
          type: number
        slaughterDate:
          description: "date when the animal has being killed"
          type: string
        birthDate:
          description: "date when the animal is born"
          type: string
        birthPlace:
          description: "place where the animal is born"
          type: string
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Table(name = "beef_productions")'
    HonneyProduction:
      allOf:
        - $ref: '#/components/schemas/Production'
      description: "a production of honney"
      type: object
      properties: 
        totalWeight:
          description: "total weight of honney produced"
          type: number
        honeyDescription:
          description: "type of honney, type of flowers nectar gathered"
          type: string
      discriminator:
        propertyName: 'productionType'
        mapping:
          'HonneyProduction': '#/components/schemas/HonneyProduction'
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Table(name = "honney_productions")'
    OrderItem:
      description: ""
      required:
      - package
      type: object
      properties:
        id:
          description: ""
          type: number
          x-field-extra-annotation: '@jakarta.persistence.Id'
        packageLot:
          $ref: '#/components/schemas/PackageLot'
          description: ""
          x-field-extra-annotation: '@jakarta.persistence.OneToOne'
        unitPrice:
          description: |-
            Price per unit ordered.
            Must be multiplied per quantity to get the total price.
            Includes taxes.
        quantity:
          description: ""
          type: number
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Table(name
        = "orderItems")'
    Order:
      description: ""
      required:
      - customer
      - id
      type: object
      properties:
        id:
          description: ""
          type: number
          x-field-extra-annotation: '@jakarta.persistence.Id'
        invoice:
          $ref: '#/components/schemas/Invoice'
          description: ""
          x-field-extra-annotation: '@jakarta.persistence.OneToOne'
        items:
          description: ""
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
          x-field-extra-annotation: '@jakarta.persistence.OneToMany'
        customer:
          $ref: '#/components/schemas/Customer'
          description: ""
          x-field-extra-annotation: '@jakarta.persistence.OneToOne'
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Table(name
        = "orders")'
    Sale:
      description: ""
      type: object
      properties:
        id:
          type: number
          x-field-extra-annotation: '@jakarta.persistence.Id'
        productions:
          description: ""
          type: array
          items:
            $ref: '#/components/schemas/Production'
          x-field-extra-annotation: '@jakarta.persistence.OneToMany'
        orders:
          description: ""
          type: array
          items:
            $ref: '#/components/schemas/Order'
          x-field-extra-annotation: '@jakarta.persistence.OneToMany'
        deliveryStart:
          description: ""
          type: string
        deliveryStop:
          description: ""
          type: string
        deliveryAddressName:
          type: string
        deliveryAddressLine1:
          type: string
        deliveryAddressLine2:
          type: string
        deliveryCity:
          type: string
        deliveryZipCode:
          type: string
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Table(name
        = "sales")'
    Producer:
      description: ""
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
          description: ""
          x-field-extra-annotation: '@jakarta.persistence.OneToOne'
        id:
          description: ""
          type: number
          x-field-extra-annotation: '@jakarta.persistence.Id'
        status:
          $ref: '#/components/schemas/ProducerStatus'
        salesCredits:
          description: "the number of sales available"
          type: number
        productions:
          type: array
          items:
            $ref: '#/components/schemas/Production'
          x-field-extra-annotation: '@jakarta.persistence.OneToMany'
      x-class-extra-annotation: '@jakarta.persistence.Entity @jakarta.persistence.Table(name
        = "producers")'
    Address:
      description: "an address for delivering orders"
      type: object
      properties:
        id: 
          type: number
          x-field-extra-annotation: '@jakarta.persistence.Id'
        name:
          description: "the name of the address"
          type: string
        city:
          type: string
        addressLine1:
          type: string
        addressLine2:
          type: string
        zipCode: 
          type: string
        owner:
          $ref: '#/components/schemas/Producer'
          description: "the producer who owns the delivery address"
    ProducerStatus:
      type: string
      enum: [ON_BOARDING, ACTIVE]

package eu.viandeendirect.model;

import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonValue;
import eu.viandeendirect.model.HonneyProduction;
import eu.viandeendirect.model.PackageLot;
import eu.viandeendirect.model.Producer;
import eu.viandeendirect.model.Production;
import eu.viandeendirect.model.Sale;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import jakarta.annotation.Generated;

/**
 * a production of honney
 */

@Schema(name = "HonneyProduction", description = "a production of honney")
@JsonIgnoreProperties(
  value = "productionType", // ignore manually set productionType, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the productionType to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "productionType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = HonneyProduction.class, name = "HonneyProduction")
})

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@jakarta.persistence.Entity @jakarta.persistence.Table(name = "honney_productions")
public class HonneyProduction extends Production {

  @JsonProperty("totalWeight")
  private Float totalWeight;

  @JsonProperty("honeyDescription")
  private String honeyDescription;

  public HonneyProduction totalWeight(Float totalWeight) {
    this.totalWeight = totalWeight;
    return this;
  }

  /**
   * total weight of honney produced
   * @return totalWeight
  */

  @Schema(name = "totalWeight", description = "total weight of honney produced", required = false)
  public Float getTotalWeight() {
    return totalWeight;
  }

  public void setTotalWeight(Float totalWeight) {
    this.totalWeight = totalWeight;
  }

  public HonneyProduction honeyDescription(String honeyDescription) {
    this.honeyDescription = honeyDescription;
    return this;
  }

  /**
   * type of honney, type of flowers nectar gathered
   * @return honeyDescription
  */
  
  @Schema(name = "honeyDescription", description = "type of honney, type of flowers nectar gathered", required = false)
  public String getHoneyDescription() {
    return honeyDescription;
  }

  public void setHoneyDescription(String honeyDescription) {
    this.honeyDescription = honeyDescription;
  }

  public HonneyProduction id(Integer id) {
    super.setId(id);
    return this;
  }

  public HonneyProduction productionType(ProductionTypeEnum productionType) {
    super.setProductionType(productionType);
    return this;
  }

  public HonneyProduction sales(List<Sale> sales) {
    super.setSales(sales);
    return this;
  }

  public HonneyProduction addSalesItem(Sale salesItem) {
    super.addSalesItem(salesItem);
    return this;
  }

  public HonneyProduction producer(Producer producer) {
    super.setProducer(producer);
    return this;
  }

  public HonneyProduction lots(List<PackageLot> lots) {
    super.setLots(lots);
    return this;
  }

  public HonneyProduction addLotsItem(PackageLot lotsItem) {
    super.addLotsItem(lotsItem);
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HonneyProduction honneyProduction = (HonneyProduction) o;
    return Objects.equals(this.totalWeight, honneyProduction.totalWeight) &&
        Objects.equals(this.honeyDescription, honneyProduction.honeyDescription) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalWeight, honeyDescription, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HonneyProduction {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    totalWeight: ").append(toIndentedString(totalWeight)).append("\n");
    sb.append("    honeyDescription: ").append(toIndentedString(honeyDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}


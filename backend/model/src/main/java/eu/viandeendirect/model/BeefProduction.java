package eu.viandeendirect.model;

import java.net.URI;
import java.util.Objects;

import com.fasterxml.jackson.annotation.*;
import eu.viandeendirect.model.BeefProduction;
import eu.viandeendirect.model.PackageLot;
import eu.viandeendirect.model.Producer;
import eu.viandeendirect.model.Production;
import eu.viandeendirect.model.Sale;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import org.springframework.format.annotation.DateTimeFormat;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import jakarta.annotation.Generated;

/**
 * a production a beef meet, obtained by slaughtering and cutting an entire animal
 */

@Schema(name = "BeefProduction", description = "a production a beef meet, obtained by slaughtering and cutting an entire animal")
@JsonIgnoreProperties(
  value = "productionType", // ignore manually set productionType, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the productionType to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "productionType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = BeefProduction.class, name = "BeefProduction")
})

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@jakarta.persistence.Entity @jakarta.persistence.Table(name = "beef_productions")
public class BeefProduction extends Production {

  @JsonProperty("animalIdentifier")
  private String animalIdentifier;

  /**
   * type of animal
   */
  public enum AnimalTypeEnum {
    BEEFPRODUCTION("BeefProduction"),

    HONNEYPRODUCTION("HonneyProduction");

    private String value;

    AnimalTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AnimalTypeEnum fromValue(String value) {
      for (AnimalTypeEnum b : AnimalTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  @JsonProperty("animalType")
  private AnimalTypeEnum animalType;

  @JsonProperty("animalLiveWeight")
  private Integer animalLiveWeight;

  @JsonProperty("slaughterDate")
  @DateTimeFormat(iso = DateTimeFormat.ISO.DATE)
  private LocalDate slaughterDate;

  @JsonProperty("birthDate")
  @DateTimeFormat(iso = DateTimeFormat.ISO.DATE)
  private LocalDate birthDate;

  @JsonProperty("birthPlace")
  private String birthPlace;

  public BeefProduction animalIdentifier(String animalIdentifier) {
    this.animalIdentifier = animalIdentifier;
    return this;
  }

  /**
   * official identifier of the animal
   * @return animalIdentifier
  */
  
  @Schema(name = "animalIdentifier", description = "official identifier of the animal", required = false)
  public String getAnimalIdentifier() {
    return animalIdentifier;
  }

  public void setAnimalIdentifier(String animalIdentifier) {
    this.animalIdentifier = animalIdentifier;
  }

  public BeefProduction animalType(AnimalTypeEnum animalType) {
    this.animalType = animalType;
    return this;
  }

  /**
   * type of animal
   * @return animalType
  */

  @Schema(name = "animalType", description = "type of animal", required = false)
  public AnimalTypeEnum getAnimalType() {
    return animalType;
  }

  public void setAnimalType(AnimalTypeEnum animalType) {
    this.animalType = animalType;
  }

  public BeefProduction animalLiveWeight(Integer animalLiveWeight) {
    this.animalLiveWeight = animalLiveWeight;
    return this;
  }

  /**
   * weight of the animal before being killed, in kilograms
   * @return animalLiveWeight
  */

  @Schema(name = "animalLiveWeight", description = "weight of the animal before being killed, in kilograms", required = false)
  public Integer getAnimalLiveWeight() {
    return animalLiveWeight;
  }

  public void setAnimalLiveWeight(Integer animalLiveWeight) {
    this.animalLiveWeight = animalLiveWeight;
  }

  public BeefProduction slaughterDate(LocalDate slaughterDate) {
    this.slaughterDate = slaughterDate;
    return this;
  }

  /**
   * date when the animal has being killed
   * @return slaughterDate
  */
  @Valid
  @Schema(name = "slaughterDate", description = "date when the animal has being killed", required = false)
  public LocalDate getSlaughterDate() {
    return slaughterDate;
  }

  public void setSlaughterDate(LocalDate slaughterDate) {
    this.slaughterDate = slaughterDate;
  }

  public BeefProduction birthDate(LocalDate birthDate) {
    this.birthDate = birthDate;
    return this;
  }

  /**
   * date when the animal is born
   * @return birthDate
  */
  @Valid
  @Schema(name = "birthDate", description = "date when the animal is born", required = false)
  public LocalDate getBirthDate() {
    return birthDate;
  }

  public void setBirthDate(LocalDate birthDate) {
    this.birthDate = birthDate;
  }

  public BeefProduction birthPlace(String birthPlace) {
    this.birthPlace = birthPlace;
    return this;
  }

  /**
   * place where the animal is born
   * @return birthPlace
  */
  
  @Schema(name = "birthPlace", description = "place where the animal is born", required = false)
  public String getBirthPlace() {
    return birthPlace;
  }

  public void setBirthPlace(String birthPlace) {
    this.birthPlace = birthPlace;
  }

  public BeefProduction id(Integer id) {
    super.setId(id);
    return this;
  }

  public BeefProduction productionType(ProductionTypeEnum productionType) {
    super.setProductionType(productionType);
    return this;
  }

  public BeefProduction sales(List<Sale> sales) {
    super.setSales(sales);
    return this;
  }

  public BeefProduction addSalesItem(Sale salesItem) {
    super.addSalesItem(salesItem);
    return this;
  }

  public BeefProduction producer(Producer producer) {
    super.setProducer(producer);
    return this;
  }

  public BeefProduction lots(List<PackageLot> lots) {
    super.setLots(lots);
    return this;
  }

  public BeefProduction addLotsItem(PackageLot lotsItem) {
    super.addLotsItem(lotsItem);
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BeefProduction beefProduction = (BeefProduction) o;
    return Objects.equals(this.animalIdentifier, beefProduction.animalIdentifier) &&
        Objects.equals(this.animalType, beefProduction.animalType) &&
        Objects.equals(this.animalLiveWeight, beefProduction.animalLiveWeight) &&
        Objects.equals(this.slaughterDate, beefProduction.slaughterDate) &&
        Objects.equals(this.birthDate, beefProduction.birthDate) &&
        Objects.equals(this.birthPlace, beefProduction.birthPlace) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(animalIdentifier, animalType, animalLiveWeight, slaughterDate, birthDate, birthPlace, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BeefProduction {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    animalIdentifier: ").append(toIndentedString(animalIdentifier)).append("\n");
    sb.append("    animalType: ").append(toIndentedString(animalType)).append("\n");
    sb.append("    animalLiveWeight: ").append(toIndentedString(animalLiveWeight)).append("\n");
    sb.append("    slaughterDate: ").append(toIndentedString(slaughterDate)).append("\n");
    sb.append("    birthDate: ").append(toIndentedString(birthDate)).append("\n");
    sb.append("    birthPlace: ").append(toIndentedString(birthPlace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}


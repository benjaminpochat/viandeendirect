package eu.viandeendirect.model;

import java.net.URI;
import java.util.Objects;

import com.fasterxml.jackson.annotation.*;
import eu.viandeendirect.model.BeefProduction;
import eu.viandeendirect.model.HonneyProduction;
import eu.viandeendirect.model.PackageLot;
import eu.viandeendirect.model.Producer;
import eu.viandeendirect.model.Sale;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.SequenceGenerator;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import jakarta.annotation.Generated;

/**
 *
 */

@Schema(name = "Production", description = "")
@JsonIgnoreProperties(
  value = "productionType", // ignore manually set productionType, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the productionType to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "productionType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = BeefProduction.class, name = "BeefProduction"),
  @JsonSubTypes.Type(value = HonneyProduction.class, name = "HonneyProduction")
})

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@jakarta.persistence.Entity @jakarta.persistence.Inheritance(strategy = jakarta.persistence.InheritanceType.TABLE_PER_CLASS)
public abstract class Production {

  @JsonProperty("id")
  @jakarta.persistence.Id
  @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "production_id_generator")
  @SequenceGenerator(name="production_id_generator", sequenceName = "production_id_seq", allocationSize = 1)
  private BigDecimal id;

  /**
   * Gets or Sets productionType
   */
  public enum ProductionTypeEnum {
    BEEFPRODUCTION("BeefProduction"),

    HONNEYPRODUCTION("HonneyProduction");

    private String value;

    ProductionTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ProductionTypeEnum fromValue(String value) {
      for (ProductionTypeEnum b : ProductionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  @JsonProperty("productionType")
  private ProductionTypeEnum productionType;

  @JsonProperty("sales")
  @jakarta.persistence.ManyToMany(mappedBy = "productions")
  @Valid
  private List<Sale> sales = null;

  @JsonProperty("producer")
  @ManyToOne
  @JsonBackReference
  private Producer producer;

  @JsonProperty("lots")
  @jakarta.persistence.OneToMany(mappedBy = "production")
  @Valid
  private List<PackageLot> lots = null;

  public Production id(BigDecimal id) {
    this.id = id;
    return this;
  }

  /**
   *
   * @return id
  */
  @Valid
  @Schema(name = "id", description = "", required = false)
  public BigDecimal getId() {
    return id;
  }

  public void setId(BigDecimal id) {
    this.id = id;
  }

  public Production productionType(ProductionTypeEnum productionType) {
    this.productionType = productionType;
    return this;
  }

  /**
   * Get productionType
   * @return productionType
  */

  @Schema(name = "productionType", required = false)
  public ProductionTypeEnum getProductionType() {
    return productionType;
  }

  public void setProductionType(ProductionTypeEnum productionType) {
    this.productionType = productionType;
  }

  public Production sales(List<Sale> sales) {
    this.sales = sales;
    return this;
  }

  public Production addSalesItem(Sale salesItem) {
    if (this.sales == null) {
      this.sales = new ArrayList<>();
    }
    this.sales.add(salesItem);
    return this;
  }

  /**
   *
   * @return sales
  */
  @Valid
  @Schema(name = "sales", description = "", required = false)
  public List<Sale> getSales() {
    return sales;
  }

  public void setSales(List<Sale> sales) {
    this.sales = sales;
  }

  public Production producer(Producer producer) {
    this.producer = producer;
    return this;
  }

  /**
   * Get producer
   * @return producer
  */
  @Valid
  @Schema(name = "producer", required = false)
  public Producer getProducer() {
    return producer;
  }

  public void setProducer(Producer producer) {
    this.producer = producer;
  }

  public Production lots(List<PackageLot> lots) {
    this.lots = lots;
    return this;
  }

  public Production addLotsItem(PackageLot lotsItem) {
    if (this.lots == null) {
      this.lots = new ArrayList<>();
    }
    this.lots.add(lotsItem);
    return this;
  }

  /**
   *
   * @return lots
  */
  @Valid
  @Schema(name = "lots", description = "", required = false)
  public List<PackageLot> getLots() {
    return lots;
  }

  public void setLots(List<PackageLot> lots) {
    this.lots = lots;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Production production = (Production) o;
    return Objects.equals(this.id, production.id) &&
        Objects.equals(this.productionType, production.productionType) &&
        Objects.equals(this.sales, production.sales) &&
        Objects.equals(this.producer, production.producer) &&
        Objects.equals(this.lots, production.lots);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, productionType, sales, producer, lots);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Production {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    productionType: ").append(toIndentedString(productionType)).append("\n");
    sb.append("    sales: ").append(toIndentedString(sales)).append("\n");
    sb.append("    producer: ").append(toIndentedString(producer)).append("\n");
    sb.append("    lots: ").append(toIndentedString(lots)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

